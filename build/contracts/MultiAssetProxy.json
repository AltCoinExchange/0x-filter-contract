{
  "contractName": "MultiAssetProxy",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "assetProxies",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "name": "addAuthorizedAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "authorities",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "assetProxyId",
          "type": "bytes4"
        }
      ],
      "name": "getAssetProxy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "name": "removeAuthorizedAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeAuthorizedAddressAtIndex",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "assetProxy",
          "type": "address"
        }
      ],
      "name": "registerAssetProxy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAuthorizedAddresses",
      "outputs": [
        {
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "id",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "name": "assetProxy",
          "type": "address"
        }
      ],
      "name": "AssetProxyRegistered",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getProxyId",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611abc806100536000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fd3c9971461048857806342f1181e14610514578063494503d41461055757806360704108146105c457806370712939146106505780638da5cb5b146106935780639ad26744146106ea578063ae25532e14610737578063b9181611146107a0578063c585bb93146107fb578063d39de6e91461083e578063f2fde38b146108aa575b3480156100c657600080fd5b507fffffffff00000000000000000000000000000000000000000000000000000000600035167fa85e59e40000000000000000000000000000000000000000000000000000000081141561048357336000526002602052604060002054151561019a577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1553454e4445525f4e4f545f415554484f52495a454400000000000000604052600060605260646000fd5b600435602881013560488201356048820183016020810335604883018501602081033580830315610236577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f4c454e4754485f4d49534d4154434800000000000000000000000000604052600060605260646000fd5b60646000803760806004526064356020840260008060005b8381101561047d5780890135858102818782041487151715156102dc577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1055494e543235365f4f564552464c4f57000000000000000000000000604052600060605260646000fd5b8060645282890135606881018d018f01602081038035600481101561038b577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1e4c454e4754485f475245415445525f5448414e5f335f5245515549526040527f454400000000000000000000000000000000000000000000000000000000000060605260646000fd5b7fffffffff00000000000000000000000000000000000000000000000000000000833516898103156103cc5780995089608452600160a45260406084205498505b881515610444577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1a41535345545f50524f58595f444f45535f4e4f545f45584953540000604052600060605260646000fd5b60208201836084376000808360a4016000808d5af180151561046a573d6000803e3d6000fd5b505050505050505060208101905061024e565b50600080f35b600080fd5b34801561049457600080fd5b506104d260048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506108ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052057600080fd5b50610555600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610920565b005b34801561056357600080fd5b5061058260048036038101908080359060200190929190505050610bc1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d057600080fd5b5061060e60048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610bff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561065c57600080fd5b50610691600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c7a565b005b34801561069f57600080fd5b506106a8610ff1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106f657600080fd5b50610735600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611016565b005b34801561074357600080fd5b5061074c611452565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156107ac57600080fd5b506107e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061148f565b604051808215151515815260200191505060405180910390f35b34801561080757600080fd5b5061083c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114af565b005b34801561084a57600080fd5b50610853611873565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561089657808201518184015260208101905061087b565b505050509050019250505060405180910390f35b3480156108b657600080fd5b506108eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611901565b005b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610aa6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f5441524745545f414c52454144595f415554484f52495a45440000000000000081525060200191505060405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c60405160405180910390a350565b600381815481101515610bd057fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d40576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5441524745545f4e4f545f415554484f52495a4544000000000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600090505b600380549050811015610f93578173ffffffffffffffffffffffffffffffffffffffff16600382815481101515610e8857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f86576003600160038054905003815481101515610ee657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600382815481101515610f2057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600381818054905003915081610f809190611a3f565b50610f93565b8080600101915050610e55565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b060405160405180910390a35050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561119b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5441524745545f4e4f545f415554484f52495a4544000000000000000000000081525060200191505060405180910390fd5b60038054905081101515611217576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f494e4445585f4f55545f4f465f424f554e44530000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660038281548110151561123d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156112f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f415554484f52495a45445f414444524553535f4d49534d41544348000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600360016003805490500381548110151561135957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038281548110151561139357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003818180549050039150816113f39190611a3f565b503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b060405160405180910390a35050565b600060405180807f4d756c746941737365742875696e743235365b5d2c62797465735b5d29000000815250601d0190506040518091039020905090565b60026020528060005260406000206000915054906101000a900460ff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611578576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b8392508273ffffffffffffffffffffffffffffffffffffffff1663ae25532e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156115df57600080fd5b505af11580156115f3573d6000803e3d6000fd5b505050506040513d602081101561160957600080fd5b8101908080519060200190929190505050915060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f41535345545f50524f58595f414c52454144595f45584953545300000000000081525060200191505060405180910390fd5b8260016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd2c6b762299c609bdb96520b58a49bfb80186934d4f71a86a367571a15c03194828560405180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150505050565b606060038054806020026020016040519081016040528092919081815260200182805480156118f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118ad575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611a3c57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b815481835581811115611a6657818360005260206000209182019101611a659190611a6b565b5b505050565b611a8d91905b80821115611a89576000816000905550600101611a71565b5090565b905600a165627a7a72305820764fbf3ccc9e594c9becb1d7f54700f13c75463708afaec28449ad2a6f4b30580029",
  "deployedBytecode": "0x6080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fd3c9971461048857806342f1181e14610514578063494503d41461055757806360704108146105c457806370712939146106505780638da5cb5b146106935780639ad26744146106ea578063ae25532e14610737578063b9181611146107a0578063c585bb93146107fb578063d39de6e91461083e578063f2fde38b146108aa575b3480156100c657600080fd5b507fffffffff00000000000000000000000000000000000000000000000000000000600035167fa85e59e40000000000000000000000000000000000000000000000000000000081141561048357336000526002602052604060002054151561019a577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1553454e4445525f4e4f545f415554484f52495a454400000000000000604052600060605260646000fd5b600435602881013560488201356048820183016020810335604883018501602081033580830315610236577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f4c454e4754485f4d49534d4154434800000000000000000000000000604052600060605260646000fd5b60646000803760806004526064356020840260008060005b8381101561047d5780890135858102818782041487151715156102dc577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1055494e543235365f4f564552464c4f57000000000000000000000000604052600060605260646000fd5b8060645282890135606881018d018f01602081038035600481101561038b577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1e4c454e4754485f475245415445525f5448414e5f335f5245515549526040527f454400000000000000000000000000000000000000000000000000000000000060605260646000fd5b7fffffffff00000000000000000000000000000000000000000000000000000000833516898103156103cc5780995089608452600160a45260406084205498505b881515610444577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1a41535345545f50524f58595f444f45535f4e4f545f45584953540000604052600060605260646000fd5b60208201836084376000808360a4016000808d5af180151561046a573d6000803e3d6000fd5b505050505050505060208101905061024e565b50600080f35b600080fd5b34801561049457600080fd5b506104d260048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506108ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052057600080fd5b50610555600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610920565b005b34801561056357600080fd5b5061058260048036038101908080359060200190929190505050610bc1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d057600080fd5b5061060e60048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610bff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561065c57600080fd5b50610691600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c7a565b005b34801561069f57600080fd5b506106a8610ff1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106f657600080fd5b50610735600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611016565b005b34801561074357600080fd5b5061074c611452565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156107ac57600080fd5b506107e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061148f565b604051808215151515815260200191505060405180910390f35b34801561080757600080fd5b5061083c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114af565b005b34801561084a57600080fd5b50610853611873565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561089657808201518184015260208101905061087b565b505050509050019250505060405180910390f35b3480156108b657600080fd5b506108eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611901565b005b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610aa6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f5441524745545f414c52454144595f415554484f52495a45440000000000000081525060200191505060405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060038190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c60405160405180910390a350565b600381815481101515610bd057fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d40576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5441524745545f4e4f545f415554484f52495a4544000000000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600090505b600380549050811015610f93578173ffffffffffffffffffffffffffffffffffffffff16600382815481101515610e8857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f86576003600160038054905003815481101515610ee657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600382815481101515610f2057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600381818054905003915081610f809190611a3f565b50610f93565b8080600101915050610e55565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b060405160405180910390a35050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561119b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5441524745545f4e4f545f415554484f52495a4544000000000000000000000081525060200191505060405180910390fd5b60038054905081101515611217576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f494e4445585f4f55545f4f465f424f554e44530000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660038281548110151561123d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156112f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f415554484f52495a45445f414444524553535f4d49534d41544348000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600360016003805490500381548110151561135957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038281548110151561139357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003818180549050039150816113f39190611a3f565b503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b060405160405180910390a35050565b600060405180807f4d756c746941737365742875696e743235365b5d2c62797465735b5d29000000815250601d0190506040518091039020905090565b60026020528060005260406000206000915054906101000a900460ff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611578576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b8392508273ffffffffffffffffffffffffffffffffffffffff1663ae25532e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156115df57600080fd5b505af11580156115f3573d6000803e3d6000fd5b505050506040513d602081101561160957600080fd5b8101908080519060200190929190505050915060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f41535345545f50524f58595f414c52454144595f45584953545300000000000081525060200191505060405180910390fd5b8260016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd2c6b762299c609bdb96520b58a49bfb80186934d4f71a86a367571a15c03194828560405180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150505050565b606060038054806020026020016040519081016040528092919081815260200182805480156118f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118ad575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f4e4c595f434f4e54524143545f4f574e45520000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611a3c57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b815481835581811115611a6657818360005260206000209182019101611a659190611a6b565b5b505050565b611a8d91905b80821115611a89576000816000905550600101611a71565b5090565b905600a165627a7a72305820764fbf3ccc9e594c9becb1d7f54700f13c75463708afaec28449ad2a6f4b30580029",
  "sourceMap": "693:15453:61:-;;;171:10:107;163:5;;:18;;;;;;;;;;;;;;;;;;693:15453:61;;;;;;",
  "deployedSourceMap": "693:15453:61:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;693:15453:61;1525:66;1521:1;1508:15;1504:88;1987:66;1977:8;1974:80;1971:2;;;2274:6;2271:1;2264:17;2309:15;2305:2;2298:27;2433:2;2430:1;2420:16;2414:23;2407:31;2404:2;;;2539:66;2536:1;2529:77;2638:66;2634:2;2627:78;2737:66;2733:2;2726:78;2836:1;2832:2;2825:13;2869:3;2866:1;2859:14;2404:2;4732:1;4719:15;6340:2;6323:15;6319:24;6306:38;6704:2;6687:15;6683:24;6670:38;7112:2;7097:13;7093:22;7076:15;7072:44;7247:2;7225:20;7221:29;7208:43;7695:2;7672:21;7668:30;7651:15;7647:52;7854:2;7824:28;7820:37;7807:51;8009:18;7997:10;7993:35;7990:2;;;8123:66;8120:1;8113:77;8222:66;8218:2;8211:78;8321:66;8317:2;8310:78;8420:1;8416:2;8409:13;8453:3;8450:1;8443:14;7990:2;8762:3;8716:1;8640;8606:226;8933:3;8930:1;8923:14;9031:3;9018:17;9166:2;9154:10;9150:19;9274:1;9310;9459;9445:6286;9468:14;9465:1;9462:21;9445:6286;;;9636:1;9614:20;9610:28;9597:42;9699:6;9683:14;9679:27;9926:14;9917:6;9904:11;9900:24;9897:44;9864:6;9857:14;9829:134;9822:142;9819:2;;;10068:66;10065:1;10058:77;10171:66;10167:2;10160:78;10274:66;10270:2;10263:78;10377:1;10373:2;10366:13;10414:3;10411:1;10404:14;9819:2;10527:11;10522:3;10515:24;10703:1;10673:28;10669:36;10656:50;11336:3;11306:28;11302:38;11279:21;11275:66;11258:15;11254:88;11502:2;11465:35;11461:44;11572:30;11559:44;11754:1;11727:25;11724:32;11721:2;;;11874:66;11871:1;11864:77;11977:66;11973:2;11966:78;12080:66;12076:2;12069:78;12183:66;12179:2;12172:78;12285:3;12282:1;12275:14;11721:2;12506:66;12444:35;12431:49;12402:192;12866:12;12845:19;12841:38;12838:2;;;12971:19;12955:35;;13233:12;13228:3;13221:25;13283:17;13278:3;13271:30;13361:2;13356:3;13346:18;13340:25;13326:39;;12838:2;13512:10;13505:18;13502:2;;;13637:66;13634:1;13627:77;13740:66;13736:2;13729:78;13843:66;13839:2;13832:78;13946:1;13942:2;13935:13;13983:3;13980:1;13973:14;13502:2;14379;14352:25;14348:34;14240:30;14146:3;14108:348;15132:1;15019;14943:25;14938:3;14934:35;14841:1;14755;14660:10;14577:3;14547:677;15348:7;15341:15;15338:2;;;15572:16;15496:1;15427;15383:256;15674:16;15671:1;15664:27;15338:2;9502:6229;;;;;;;;9497:2;9494:1;9490:10;9485:15;;9445:6286;;;9449:12;15821:1;15818;15811:12;1971:2;15915:1;15912;15905:12;948:51:65;;8:9:-1;5:2;;;30:1;27;20:12;5:2;948:51:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1168:320:60;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1168:320:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;1053:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1053:28:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2064:154:65;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2064:154:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1602:547:60;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1602:547:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;92:20:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;92:20:107;;;;;;;;;;;;;;;;;;;;;;;;;;;2322:643:60;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2322:643:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16031:113:61;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16031:113:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1004:43:60;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1004:43:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1208:666:65;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1208:666:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;3062:138:60;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3062:138:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3062:138:60;;;;;;;;;;;;;;;;;334:167:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;334:167:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;948:51:65;;;;;;;;;;;;;;;;;;;;;;:::o;1168:320:60:-;260:5:107;;;;;;;;;;;246:19;;:10;:19;;;225:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1285:10:60;:18;1296:6;1285:18;;;;;;;;;;;;;;;;;;;;;;;;;1284:19;1263:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1386:4;1365:10;:18;1376:6;1365:18;;;;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;1400:11;1417:6;1400:24;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1400:24:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1470:10;1439:42;;1462:6;1439:42;;;;;;;;;;;;1168:320;:::o;1053:28::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2064:154:65:-;2155:7;2185:12;:26;2198:12;2185:26;;;;;;;;;;;;;;;;;;;;;;;;;;;2178:33;;2064:154;;;:::o;1602:547:60:-;1837:9;260:5:107;;;;;;;;;;;246:19;;:10;:19;;;225:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1721:10:60;:18;1732:6;1721:18;;;;;;;;;;;;;;;;;;;;;;;;;1700:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1804:10;:18;1815:6;1804:18;;;;;;;;;;;;;;;;1797:25;;;;;;;;;;;1849:1;1837:13;;1832:252;1856:11;:18;;;;1852:1;:22;1832:252;;;1917:6;1899:24;;:11;1911:1;1899:14;;;;;;;;;;;;;;;;;;;;;;;;;;;:24;;;1895:179;;;1960:11;1993:1;1972:11;:18;;;;:22;1960:35;;;;;;;;;;;;;;;;;;;;;;;;;;;1943:11;1955:1;1943:14;;;;;;;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;2035:1;2013:11;:23;;;;;;;;;;;;;;:::i;:::-;;2054:5;;1895:179;1876:3;;;;;;;1832:252;;;2131:10;2098:44;;2123:6;2098:44;;;;;;;;;;;;1602:547;;:::o;92:20:107:-;;;;;;;;;;;;;:::o;2322:643:60:-;260:5:107;;;;;;;;;;;246:19;;:10;:19;;;225:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2485:10:60;:18;2496:6;2485:18;;;;;;;;;;;;;;;;;;;;;;;;;2464:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2589:11;:18;;;;2581:5;:26;2560:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2705:6;2683:28;;:11;2695:5;2683:18;;;;;;;;;;;;;;;;;;;;;;;;;;;:28;;;2662:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2782:10;:18;2793:6;2782:18;;;;;;;;;;;;;;;;2775:25;;;;;;;;;;;2831:11;2864:1;2843:11;:18;;;;:22;2831:35;;;;;;;;;;;;;;;;;;;;;;;;;;;2810:11;2822:5;2810:18;;;;;;;;;;;;;;;;;;:56;;;;;;;;;;;;;;;;;;2898:1;2876:11;:23;;;;;;;;;;;;;;:::i;:::-;;2947:10;2914:44;;2939:6;2914:44;;;;;;;;;;;;2322:643;;:::o;16031:113:61:-;16100:6;848:42;;;;;;;;;;;;;;;;;;;16122:15;;16031:113;:::o;1004:43:60:-;;;;;;;;;;;;;;;;;;;;;;:::o;1208:666:65:-;1305:30;1434:19;1497:25;260:5:107;;;;;;;;;;;246:19;;:10;:19;;;225:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1350:10:65;1305:56;;1456:18;:29;;;:31;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1456:31:65;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1456:31:65;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1456:31:65;;;;;;;;;;;;;;;;1434:53;;1525:12;:26;1538:12;1525:26;;;;;;;;;;;;;;;;;;;;;;;;;;;1497:54;;1611:1;1582:31;;:17;:31;;;1561:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1754:18;1725:12;:26;1738:12;1725:26;;;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;1787:80;1821:12;1847:10;1787:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1208:666;;;;:::o;3062:138:60:-;3143:9;3182:11;3175:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3062:138;:::o;334:167:107:-;260:5;;;;;;;;;;;246:19;;:10;:19;;;225:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;450:1;430:22;;:8;:22;;;;426:69;;;476:8;468:5;;:16;;;;;;;;;;;;;;;;;;426:69;334:167;:::o;693:15453:61:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../Exchange/MixinAssetProxyDispatcher.sol\";\nimport \"./MixinAuthorizable.sol\";\n\n\ncontract MultiAssetProxy is\n    MixinAssetProxyDispatcher,\n    MixinAuthorizable\n{\n    // Id of this proxy.\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"MultiAsset(uint256[],bytes[])\"));\n\n    // solhint-disable-next-line payable-fallback\n    function ()\n        external\n    {\n        // NOTE: The below assembly assumes that clients do some input validation and that the input is properly encoded according to the AbiV2 specification.\n        // It is technically possible for inputs with very large lengths and offsets to cause overflows. However, this would make the calldata prohibitively\n        // expensive and we therefore do not check for overflows in these scenarios.\n        assembly {\n            // The first 4 bytes of calldata holds the function selector\n            let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n            // `transferFrom` will be called with the following parameters:\n            // assetData Encoded byte array.\n            // from Address to transfer asset from.\n            // to Address to transfer asset to.\n            // amount Amount of asset to transfer.\n            // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n            if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {\n\n                // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n                // where k is the key left padded to 32 bytes and p is the storage slot\n                mstore(0, caller)\n                mstore(32, authorized_slot)\n\n                // Revert if authorized[msg.sender] == false\n                if iszero(sload(keccak256(0, 64))) {\n                    // Revert with `Error(\"SENDER_NOT_AUTHORIZED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // `transferFrom`.\n                // The function is marked `external`, so no abi decoding is done for\n                // us. Instead, we expect the `calldata` memory to contain the\n                // following:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 4 * 32  | function parameters:                |\n                // |          | 4      |         |   1. offset to assetData (*)        |\n                // |          | 36     |         |   2. from                           |\n                // |          | 68     |         |   3. to                             |\n                // |          | 100    |         |   4. amount                         |\n                // | Data     |        |         | assetData:                          |\n                // |          | 132    | 32      | assetData Length                    |\n                // |          | 164    | **      | assetData Contents                  |\n                //\n                // (*): offset is computed from start of function parameters, so offset\n                //      by an additional 4 bytes in the calldata.\n                //\n                // (**): see table below to compute length of assetData Contents\n                //\n                // WARNING: The ABIv2 specification allows additional padding between\n                //          the Params and Data section. This will result in a larger\n                //          offset to assetData.\n\n                // Load offset to `assetData`\n                let assetDataOffset := calldataload(4)\n\n                // Asset data itself is encoded as follows:\n                //\n                // | Area     | Offset      | Length  | Contents                            |\n                // |----------|-------------|---------|-------------------------------------|\n                // | Header   | 0           | 4       | assetProxyId                        |\n                // | Params   |             | 2 * 32  | function parameters:                |\n                // |          | 4           |         |   1. offset to amounts (*)          |\n                // |          | 36          |         |   2. offset to nestedAssetData (*)  |\n                // | Data     |             |         | amounts:                            |\n                // |          | 68          | 32      | amounts Length                      |\n                // |          | 100         | a       | amounts Contents                    | \n                // |          |             |         | nestedAssetData:                    |\n                // |          | 100 + a     | 32      | nestedAssetData Length              |\n                // |          | 132 + a     | b       | nestedAssetData Contents (offsets)  |\n                // |          | 132 + a + b |         | nestedAssetData[0, ..., len]        |\n\n                // In order to find the offset to `amounts`, we must add:\n                // 4 (function selector)\n                // + assetDataOffset\n                // + 32 (assetData len)\n                // + 4 (assetProxyId)\n                let amountsOffset := calldataload(add(assetDataOffset, 40))\n\n                // In order to find the offset to `nestedAssetData`, we must add:\n                // 4 (function selector)\n                // + assetDataOffset\n                // + 32 (assetData len)\n                // + 4 (assetProxyId)\n                // + 32 (amounts offset)\n                let nestedAssetDataOffset := calldataload(add(assetDataOffset, 72))\n\n                // In order to find the start of the `amounts` contents, we must add: \n                // 4 (function selector) \n                // + assetDataOffset \n                // + 32 (assetData len)\n                // + 4 (assetProxyId)\n                // + amountsOffset\n                // + 32 (amounts len)\n                let amountsContentsStart := add(assetDataOffset, add(amountsOffset, 72))\n\n                // Load number of elements in `amounts`\n                let amountsLen := calldataload(sub(amountsContentsStart, 32))\n\n                // In order to find the start of the `nestedAssetData` contents, we must add: \n                // 4 (function selector) \n                // + assetDataOffset \n                // + 32 (assetData len)\n                // + 4 (assetProxyId)\n                // + nestedAssetDataOffset\n                // + 32 (nestedAssetData len)\n                let nestedAssetDataContentsStart := add(assetDataOffset, add(nestedAssetDataOffset, 72))\n\n                // Load number of elements in `nestedAssetData`\n                let nestedAssetDataLen := calldataload(sub(nestedAssetDataContentsStart, 32))\n\n                // Revert if number of elements in `amounts` differs from number of elements in `nestedAssetData`\n                if sub(amountsLen, nestedAssetDataLen) {\n                    // Revert with `Error(\"LENGTH_MISMATCH\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000f4c454e4754485f4d49534d4154434800000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // Copy `transferFrom` selector, offset to `assetData`, `from`, and `to` from calldata to memory\n                calldatacopy(\n                    0,   // memory can safely be overwritten from beginning\n                    0,   // start of calldata\n                    100  // length of selector (4) and 3 params (32 * 3)\n                )\n\n                // Overwrite existing offset to `assetData` with our own\n                mstore(4, 128)\n                \n                // Load `amount`\n                let amount := calldataload(100)\n        \n                // Calculate number of bytes in `amounts` contents\n                let amountsByteLen := mul(amountsLen, 32)\n\n                // Initialize `assetProxyId` and `assetProxy` to 0\n                let assetProxyId := 0\n                let assetProxy := 0\n\n                // Loop through `amounts` and `nestedAssetData`, calling `transferFrom` for each respective element\n                for {let i := 0} lt(i, amountsByteLen) {i := add(i, 32)} {\n\n                    // Calculate the total amount\n                    let amountsElement := calldataload(add(amountsContentsStart, i))\n                    let totalAmount := mul(amountsElement, amount)\n\n                    // Revert if `amount` != 0 and multiplication resulted in an overflow \n                    if iszero(or(\n                        iszero(amount),\n                        eq(div(totalAmount, amount), amountsElement)\n                    )) {\n                        // Revert with `Error(\"UINT256_OVERFLOW\")`\n                        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                        mstore(64, 0x0000001055494e543235365f4f564552464c4f57000000000000000000000000)\n                        mstore(96, 0)\n                        revert(0, 100)\n                    }\n\n                    // Write `totalAmount` to memory\n                    mstore(100, totalAmount)\n\n                    // Load offset to `nestedAssetData[i]`\n                    let nestedAssetDataElementOffset := calldataload(add(nestedAssetDataContentsStart, i))\n\n                    // In order to find the start of the `nestedAssetData[i]` contents, we must add:\n                    // 4 (function selector) \n                    // + assetDataOffset \n                    // + 32 (assetData len)\n                    // + 4 (assetProxyId)\n                    // + nestedAssetDataOffset\n                    // + 32 (nestedAssetData len)\n                    // + nestedAssetDataElementOffset\n                    // + 32 (nestedAssetDataElement len)\n                    let nestedAssetDataElementContentsStart := add(assetDataOffset, add(nestedAssetDataOffset, add(nestedAssetDataElementOffset, 104)))\n\n                    // Load length of `nestedAssetData[i]`\n                    let nestedAssetDataElementLenStart := sub(nestedAssetDataElementContentsStart, 32)\n                    let nestedAssetDataElementLen := calldataload(nestedAssetDataElementLenStart)\n\n                    // Revert if the `nestedAssetData` does not contain a 4 byte `assetProxyId`\n                    if lt(nestedAssetDataElementLen, 4) {\n                        // Revert with `Error(\"LENGTH_GREATER_THAN_3_REQUIRED\")`\n                        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                        mstore(64, 0x0000001e4c454e4754485f475245415445525f5448414e5f335f524551554952)\n                        mstore(96, 0x4544000000000000000000000000000000000000000000000000000000000000)\n                        revert(0, 100)\n                    }\n\n                    // Load AssetProxy id\n                    let currentAssetProxyId := and(\n                        calldataload(nestedAssetDataElementContentsStart),\n                        0xffffffff00000000000000000000000000000000000000000000000000000000\n                    )\n\n                    // Only load `assetProxy` if `currentAssetProxyId` does not equal `assetProxyId`\n                    // We do not need to check if `currentAssetProxyId` is 0 since `assetProxy` is also initialized to 0\n                    if sub(currentAssetProxyId, assetProxyId) {\n                        // Update `assetProxyId`\n                        assetProxyId := currentAssetProxyId\n                        // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n                        // where k is the key left padded to 32 bytes and p is the storage slot\n                        mstore(132, assetProxyId)\n                        mstore(164, assetProxies_slot)\n                        assetProxy := sload(keccak256(132, 64))\n                    }\n                    \n                    // Revert if AssetProxy with given id does not exist\n                    if iszero(assetProxy) {\n                        // Revert with `Error(\"ASSET_PROXY_DOES_NOT_EXIST\")`\n                        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                        mstore(64, 0x0000001a41535345545f50524f58595f444f45535f4e4f545f45584953540000)\n                        mstore(96, 0)\n                        revert(0, 100)\n                    }\n    \n                    // Copy `nestedAssetData[i]` from calldata to memory\n                    calldatacopy(\n                        132,                                // memory slot after `amounts[i]`\n                        nestedAssetDataElementLenStart,     // location of `nestedAssetData[i]` in calldata\n                        add(nestedAssetDataElementLen, 32)  // `nestedAssetData[i].length` plus 32 byte length\n                    )\n\n                    // call `assetProxy.transferFrom`\n                    let success := call(\n                        gas,                                    // forward all gas\n                        assetProxy,                             // call address of asset proxy\n                        0,                                      // don't send any ETH\n                        0,                                      // pointer to start of input\n                        add(164, nestedAssetDataElementLen),    // length of input  \n                        0,                                      // write output over memory that won't be reused\n                        0                                       // don't copy output to memory\n                    )\n\n                    // Revert with reason given by AssetProxy if `transferFrom` call failed\n                    if iszero(success) {\n                        returndatacopy(\n                            0,                // copy to memory at 0\n                            0,                // copy from return data at 0\n                            returndatasize()  // copy all return data\n                        )\n                        revert(0, returndatasize())\n                    }\n                }\n\n                // Return if no `transferFrom` calls reverted\n                return(0, 0)\n            }\n\n            // Revert if undefined function is called\n            revert(0, 0)\n        }\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n}\n",
  "sourcePath": "/Users/lawrenceballou/Desktop/BlockNerds/Clients/AltcoinIo/filter-contract/contracts/protocol/contracts/protocol/AssetProxy/MultiAssetProxy.sol",
  "ast": {
    "absolutePath": "/Users/lawrenceballou/Desktop/BlockNerds/Clients/AltcoinIo/filter-contract/contracts/protocol/contracts/protocol/AssetProxy/MultiAssetProxy.sol",
    "exportedSymbols": {
      "MultiAssetProxy": [
        6476
      ]
    },
    "id": 6477,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6449,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:61"
      },
      {
        "absolutePath": "/Users/lawrenceballou/Desktop/BlockNerds/Clients/AltcoinIo/filter-contract/contracts/protocol/contracts/protocol/Exchange/MixinAssetProxyDispatcher.sol",
        "file": "../Exchange/MixinAssetProxyDispatcher.sol",
        "id": 6450,
        "nodeType": "ImportDirective",
        "scope": 6477,
        "sourceUnit": 6860,
        "src": "605:51:61",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/lawrenceballou/Desktop/BlockNerds/Clients/AltcoinIo/filter-contract/contracts/protocol/contracts/protocol/AssetProxy/MixinAuthorizable.sol",
        "file": "./MixinAuthorizable.sol",
        "id": 6451,
        "nodeType": "ImportDirective",
        "scope": 6477,
        "sourceUnit": 6448,
        "src": "657:33:61",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6452,
              "name": "MixinAssetProxyDispatcher",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6859,
              "src": "725:25:61",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MixinAssetProxyDispatcher_$6859",
                "typeString": "contract MixinAssetProxyDispatcher"
              }
            },
            "id": 6453,
            "nodeType": "InheritanceSpecifier",
            "src": "725:25:61"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6454,
              "name": "MixinAuthorizable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6447,
              "src": "756:17:61",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MixinAuthorizable_$6447",
                "typeString": "contract MixinAuthorizable"
              }
            },
            "id": 6455,
            "nodeType": "InheritanceSpecifier",
            "src": "756:17:61"
          }
        ],
        "contractDependencies": [
          3410,
          3425,
          6447,
          6501,
          6859,
          9424,
          13475,
          13523
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 6476,
        "linearizedBaseContracts": [
          6476,
          6447,
          6501,
          3410,
          6859,
          9424,
          3425,
          13523,
          13475
        ],
        "name": "MultiAssetProxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 6462,
            "name": "PROXY_ID",
            "nodeType": "VariableDeclaration",
            "scope": 6476,
            "src": "805:86:61",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 6456,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "805:6:61",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "arguments": [
                    {
                      "argumentTypes": null,
                      "hexValue": "4d756c746941737365742875696e743235365b5d2c62797465735b5d29",
                      "id": 6459,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "858:31:61",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_94cfcdd724aec111a2a9db8eb5238c110fa68fabecd5e836974fece6ebf20136",
                        "typeString": "literal_string \"MultiAsset(uint256[],bytes[])\""
                      },
                      "value": "MultiAsset(uint256[],bytes[])"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_stringliteral_94cfcdd724aec111a2a9db8eb5238c110fa68fabecd5e836974fece6ebf20136",
                        "typeString": "literal_string \"MultiAsset(uint256[],bytes[])\""
                      }
                    ],
                    "id": 6458,
                    "name": "keccak256",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 13725,
                    "src": "848:9:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                      "typeString": "function () pure returns (bytes32)"
                    }
                  },
                  "id": 6460,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "848:42:61",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                ],
                "id": 6457,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "841:6:61",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes4_$",
                  "typeString": "type(bytes4)"
                },
                "typeName": "bytes4"
              },
              "id": 6461,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "841:50:61",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 6466,
              "nodeType": "Block",
              "src": "981:14952:61",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "authorized_slot": {
                        "declaration": 6274,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "2309:15:61",
                        "valueSize": 1
                      }
                    },
                    {
                      "assetProxies_slot": {
                        "declaration": 6751,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "13283:17:61",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6465,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n    {\n        mstore(0, caller())\n        mstore(32, authorized_slot)\n        if iszero(sload(keccak256(0, 64)))\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        let assetDataOffset := calldataload(4)\n        let amountsOffset := calldataload(add(assetDataOffset, 40))\n        let nestedAssetDataOffset := calldataload(add(assetDataOffset, 72))\n        let amountsContentsStart := add(assetDataOffset, add(amountsOffset, 72))\n        let amountsLen := calldataload(sub(amountsContentsStart, 32))\n        let nestedAssetDataContentsStart := add(assetDataOffset, add(nestedAssetDataOffset, 72))\n        let nestedAssetDataLen := calldataload(sub(nestedAssetDataContentsStart, 32))\n        if sub(amountsLen, nestedAssetDataLen)\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000000f4c454e4754485f4d49534d4154434800000000000000000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        calldatacopy(0, 0, 100)\n        mstore(4, 128)\n        let amount := calldataload(100)\n        let amountsByteLen := mul(amountsLen, 32)\n        let assetProxyId := 0\n        let assetProxy := 0\n        for {\n            let i := 0\n        }\n        lt(i, amountsByteLen)\n        {\n            i := add(i, 32)\n        }\n        {\n            let amountsElement := calldataload(add(amountsContentsStart, i))\n            let totalAmount := mul(amountsElement, amount)\n            if iszero(or(iszero(amount), eq(div(totalAmount, amount), amountsElement)))\n            {\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000001055494e543235365f4f564552464c4f57000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            mstore(100, totalAmount)\n            let nestedAssetDataElementOffset := calldataload(add(nestedAssetDataContentsStart, i))\n            let nestedAssetDataElementContentsStart := add(assetDataOffset, add(nestedAssetDataOffset, add(nestedAssetDataElementOffset, 104)))\n            let nestedAssetDataElementLenStart := sub(nestedAssetDataElementContentsStart, 32)\n            let nestedAssetDataElementLen := calldataload(nestedAssetDataElementLenStart)\n            if lt(nestedAssetDataElementLen, 4)\n            {\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000001e4c454e4754485f475245415445525f5448414e5f335f524551554952)\n                mstore(96, 0x4544000000000000000000000000000000000000000000000000000000000000)\n                revert(0, 100)\n            }\n            let currentAssetProxyId := and(calldataload(nestedAssetDataElementContentsStart), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n            if sub(currentAssetProxyId, assetProxyId)\n            {\n                assetProxyId := currentAssetProxyId\n                mstore(132, assetProxyId)\n                mstore(164, assetProxies_slot)\n                assetProxy := sload(keccak256(132, 64))\n            }\n            if iszero(assetProxy)\n            {\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000001a41535345545f50524f58595f444f45535f4e4f545f45584953540000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            calldatacopy(132, nestedAssetDataElementLenStart, add(nestedAssetDataElementLen, 32))\n            let success := call(gas(), assetProxy, 0, 0, add(164, nestedAssetDataElementLen), 0, 0)\n            if iszero(success)\n            {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n        return(0, 0)\n    }\n    revert(0, 0)\n}",
                  "src": "1392:14541:61"
                }
              ]
            },
            "documentation": null,
            "id": 6467,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6463,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "957:2:61"
            },
            "payable": false,
            "returnParameters": {
              "id": 6464,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "981:0:61"
            },
            "scope": 6476,
            "src": "948:14985:61",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6474,
              "nodeType": "Block",
              "src": "16112:32:61",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6472,
                    "name": "PROXY_ID",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6462,
                    "src": "16129:8:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 6471,
                  "id": 6473,
                  "nodeType": "Return",
                  "src": "16122:15:61"
                }
              ]
            },
            "documentation": "@dev Gets the proxy id associated with the proxy address.\n @return Proxy id.",
            "id": 6475,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getProxyId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6468,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16050:2:61"
            },
            "payable": false,
            "returnParameters": {
              "id": 6471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6470,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6475,
                  "src": "16100:6:61",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 6469,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "16100:6:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16099:8:61"
            },
            "scope": 6476,
            "src": "16031:113:61",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 6477,
        "src": "693:15453:61"
      }
    ],
    "src": "580:15567:61"
  },
  "legacyAST": {
    "absolutePath": "/Users/lawrenceballou/Desktop/BlockNerds/Clients/AltcoinIo/filter-contract/contracts/protocol/contracts/protocol/AssetProxy/MultiAssetProxy.sol",
    "exportedSymbols": {
      "MultiAssetProxy": [
        6476
      ]
    },
    "id": 6477,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6449,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:61"
      },
      {
        "absolutePath": "/Users/lawrenceballou/Desktop/BlockNerds/Clients/AltcoinIo/filter-contract/contracts/protocol/contracts/protocol/Exchange/MixinAssetProxyDispatcher.sol",
        "file": "../Exchange/MixinAssetProxyDispatcher.sol",
        "id": 6450,
        "nodeType": "ImportDirective",
        "scope": 6477,
        "sourceUnit": 6860,
        "src": "605:51:61",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/lawrenceballou/Desktop/BlockNerds/Clients/AltcoinIo/filter-contract/contracts/protocol/contracts/protocol/AssetProxy/MixinAuthorizable.sol",
        "file": "./MixinAuthorizable.sol",
        "id": 6451,
        "nodeType": "ImportDirective",
        "scope": 6477,
        "sourceUnit": 6448,
        "src": "657:33:61",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6452,
              "name": "MixinAssetProxyDispatcher",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6859,
              "src": "725:25:61",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MixinAssetProxyDispatcher_$6859",
                "typeString": "contract MixinAssetProxyDispatcher"
              }
            },
            "id": 6453,
            "nodeType": "InheritanceSpecifier",
            "src": "725:25:61"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6454,
              "name": "MixinAuthorizable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6447,
              "src": "756:17:61",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MixinAuthorizable_$6447",
                "typeString": "contract MixinAuthorizable"
              }
            },
            "id": 6455,
            "nodeType": "InheritanceSpecifier",
            "src": "756:17:61"
          }
        ],
        "contractDependencies": [
          3410,
          3425,
          6447,
          6501,
          6859,
          9424,
          13475,
          13523
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 6476,
        "linearizedBaseContracts": [
          6476,
          6447,
          6501,
          3410,
          6859,
          9424,
          3425,
          13523,
          13475
        ],
        "name": "MultiAssetProxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 6462,
            "name": "PROXY_ID",
            "nodeType": "VariableDeclaration",
            "scope": 6476,
            "src": "805:86:61",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 6456,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "805:6:61",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "arguments": [
                    {
                      "argumentTypes": null,
                      "hexValue": "4d756c746941737365742875696e743235365b5d2c62797465735b5d29",
                      "id": 6459,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "858:31:61",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_94cfcdd724aec111a2a9db8eb5238c110fa68fabecd5e836974fece6ebf20136",
                        "typeString": "literal_string \"MultiAsset(uint256[],bytes[])\""
                      },
                      "value": "MultiAsset(uint256[],bytes[])"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_stringliteral_94cfcdd724aec111a2a9db8eb5238c110fa68fabecd5e836974fece6ebf20136",
                        "typeString": "literal_string \"MultiAsset(uint256[],bytes[])\""
                      }
                    ],
                    "id": 6458,
                    "name": "keccak256",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 13725,
                    "src": "848:9:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                      "typeString": "function () pure returns (bytes32)"
                    }
                  },
                  "id": 6460,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "848:42:61",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                ],
                "id": 6457,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "841:6:61",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes4_$",
                  "typeString": "type(bytes4)"
                },
                "typeName": "bytes4"
              },
              "id": 6461,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "841:50:61",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 6466,
              "nodeType": "Block",
              "src": "981:14952:61",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "authorized_slot": {
                        "declaration": 6274,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "2309:15:61",
                        "valueSize": 1
                      }
                    },
                    {
                      "assetProxies_slot": {
                        "declaration": 6751,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "13283:17:61",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6465,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n    {\n        mstore(0, caller())\n        mstore(32, authorized_slot)\n        if iszero(sload(keccak256(0, 64)))\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        let assetDataOffset := calldataload(4)\n        let amountsOffset := calldataload(add(assetDataOffset, 40))\n        let nestedAssetDataOffset := calldataload(add(assetDataOffset, 72))\n        let amountsContentsStart := add(assetDataOffset, add(amountsOffset, 72))\n        let amountsLen := calldataload(sub(amountsContentsStart, 32))\n        let nestedAssetDataContentsStart := add(assetDataOffset, add(nestedAssetDataOffset, 72))\n        let nestedAssetDataLen := calldataload(sub(nestedAssetDataContentsStart, 32))\n        if sub(amountsLen, nestedAssetDataLen)\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000000f4c454e4754485f4d49534d4154434800000000000000000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        calldatacopy(0, 0, 100)\n        mstore(4, 128)\n        let amount := calldataload(100)\n        let amountsByteLen := mul(amountsLen, 32)\n        let assetProxyId := 0\n        let assetProxy := 0\n        for {\n            let i := 0\n        }\n        lt(i, amountsByteLen)\n        {\n            i := add(i, 32)\n        }\n        {\n            let amountsElement := calldataload(add(amountsContentsStart, i))\n            let totalAmount := mul(amountsElement, amount)\n            if iszero(or(iszero(amount), eq(div(totalAmount, amount), amountsElement)))\n            {\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000001055494e543235365f4f564552464c4f57000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            mstore(100, totalAmount)\n            let nestedAssetDataElementOffset := calldataload(add(nestedAssetDataContentsStart, i))\n            let nestedAssetDataElementContentsStart := add(assetDataOffset, add(nestedAssetDataOffset, add(nestedAssetDataElementOffset, 104)))\n            let nestedAssetDataElementLenStart := sub(nestedAssetDataElementContentsStart, 32)\n            let nestedAssetDataElementLen := calldataload(nestedAssetDataElementLenStart)\n            if lt(nestedAssetDataElementLen, 4)\n            {\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000001e4c454e4754485f475245415445525f5448414e5f335f524551554952)\n                mstore(96, 0x4544000000000000000000000000000000000000000000000000000000000000)\n                revert(0, 100)\n            }\n            let currentAssetProxyId := and(calldataload(nestedAssetDataElementContentsStart), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n            if sub(currentAssetProxyId, assetProxyId)\n            {\n                assetProxyId := currentAssetProxyId\n                mstore(132, assetProxyId)\n                mstore(164, assetProxies_slot)\n                assetProxy := sload(keccak256(132, 64))\n            }\n            if iszero(assetProxy)\n            {\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000001a41535345545f50524f58595f444f45535f4e4f545f45584953540000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            calldatacopy(132, nestedAssetDataElementLenStart, add(nestedAssetDataElementLen, 32))\n            let success := call(gas(), assetProxy, 0, 0, add(164, nestedAssetDataElementLen), 0, 0)\n            if iszero(success)\n            {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n        return(0, 0)\n    }\n    revert(0, 0)\n}",
                  "src": "1392:14541:61"
                }
              ]
            },
            "documentation": null,
            "id": 6467,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6463,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "957:2:61"
            },
            "payable": false,
            "returnParameters": {
              "id": 6464,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "981:0:61"
            },
            "scope": 6476,
            "src": "948:14985:61",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6474,
              "nodeType": "Block",
              "src": "16112:32:61",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6472,
                    "name": "PROXY_ID",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6462,
                    "src": "16129:8:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 6471,
                  "id": 6473,
                  "nodeType": "Return",
                  "src": "16122:15:61"
                }
              ]
            },
            "documentation": "@dev Gets the proxy id associated with the proxy address.\n @return Proxy id.",
            "id": 6475,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getProxyId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6468,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16050:2:61"
            },
            "payable": false,
            "returnParameters": {
              "id": 6471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6470,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6475,
                  "src": "16100:6:61",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 6469,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "16100:6:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16099:8:61"
            },
            "scope": 6476,
            "src": "16031:113:61",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 6477,
        "src": "693:15453:61"
      }
    ],
    "src": "580:15567:61"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.0",
  "updatedAt": "2018-12-28T17:39:10.971Z",
  "devdoc": {
    "methods": {
      "addAuthorizedAddress(address)": {
        "details": "Authorizes an address.",
        "params": {
          "target": "Address to authorize."
        }
      },
      "getAssetProxy(bytes4)": {
        "details": "Gets an asset proxy.",
        "params": {
          "assetProxyId": "Id of the asset proxy."
        },
        "return": "The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered."
      },
      "getAuthorizedAddresses()": {
        "details": "Gets all authorized addresses.",
        "return": "Array of authorized addresses."
      },
      "getProxyId()": {
        "details": "Gets the proxy id associated with the proxy address.",
        "return": "Proxy id."
      },
      "registerAssetProxy(address)": {
        "details": "Registers an asset proxy to its asset proxy id.      Once an asset proxy is registered, it cannot be unregistered.",
        "params": {
          "assetProxy": "Address of new asset proxy to register."
        }
      },
      "removeAuthorizedAddress(address)": {
        "details": "Removes authorizion of an address.",
        "params": {
          "target": "Address to remove authorization from."
        }
      },
      "removeAuthorizedAddressAtIndex(address,uint256)": {
        "details": "Removes authorizion of an address.",
        "params": {
          "index": "Index of target in authorities array.",
          "target": "Address to remove authorization from."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}